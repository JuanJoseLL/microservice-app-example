trigger:
  branches:
    include:
    - dev
    - master # Deploy main to prod, dev to dev environment
  paths:
    include: # Trigger only if app code or k8s manifests change
    - 'auth-api/'
    - 'users-api/'
    - 'todos-api/'
    - 'log-message-processor/'
    - 'frontend/'
    - 'k8s/'
    - 'azure-pipelines-app.yml'
    exclude:
    - '**/*.md' # Exclude markdown changes

pool:
  vmImage: ubuntu-latest

variables:
  # Determine environment based on branch
  - name: environment
    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
      value: 'prod'
    ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
      value: 'dev'
  # Link to the variable group containing infra outputs
  - group: app-variables-${{ variables.environment }} # e.g., app-variables-dev or app-variables-prod

  # Define image names consistently
  - name: imageAuthApi
    value: 'auth-api'
  - name: imageUsersApi
    value: 'users-api'
  - name: imageTodosApi
    value: 'todos-api'
  - name: imageLogProcessor
    value: 'log-message-processor'
  - name: imageFrontend
    value: 'frontend'

  # Kubernetes details
  - name: k8sNamespace
    value: 'apps-$(environment)' # Deploy apps into a namespace per environment
  - name: k8sImagePullSecretName
    value: 'acr-secret'
  - name: k8sRedisSecretName
    value: 'redis-secret'
  - name: k8sAppSecretName # Name for the JWT secret
    value: 'app-secrets'
  - name: k8sManifestPath
    value: 'k8s' # Path to your kubernetes manifests in the repo

stages:
# =========================================================================
# Stage 1: Build and Push Docker Images
# =========================================================================
- stage: BuildAndPush
  displayName: Build & Push Images
  jobs:
  # Use a matrix strategy to build/push services concurrently
  - job: BuildPushMatrix
    displayName: Build and Push Services
    strategy:
      matrix:
        AuthApi:
          imageName: $(imageAuthApi)
          buildContext: 'auth-api'
        UsersApi:
          imageName: $(imageUsersApi)
          buildContext: 'users-api'
        TodosApi:
          imageName: $(imageTodosApi)
          buildContext: 'todos-api'
        LogProcessor:
          imageName: $(imageLogProcessor)
          buildContext: 'log-message-processor'
        Frontend:
          imageName: $(imageFrontend)
          buildContext: 'frontend'
    steps:
      - task: Docker@2
        displayName: 'Build and Push $(imageName)'
        inputs:
          containerRegistry: 'ACR-Service-Connection' # Your Service Connection name linked to Azure
          repository: '$(imageName)' # Use the matrix variable
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/$(buildContext)/Dockerfile' # Use the matrix variable
          buildContext: '$(Build.SourcesDirectory)/$(buildContext)' # Set build context to service directory
          tags: '$(Build.BuildId)' # Tag image with the pipeline build ID
          addPipelineData: false # Avoid adding extra labels unless desired

# =========================================================================
# Stage 2: Deploy to AKS
# =========================================================================
- stage: DeployToAKS
  displayName: Deploy Applications to AKS
  dependsOn: BuildAndPush
  condition: and(succeeded('BuildAndPush'), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'dev')))
  jobs:
  - deployment: DeployApps
    displayName: Deploy to AKS ($(environment))
    environment: 'aks-$(environment)' # Define an ADO Environment for approvals/history
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              displayName: 'Debug: List Source Directory Contents'
              inputs:
                targetType: 'inline'
                script: |
                  echo "Listing contents of $(Build.SourcesDirectory):"
                  ls -la $(Build.SourcesDirectory)
                  echo "Checking for $(Build.SourcesDirectory)/$(k8sManifestPath):"
                  if [ -d "$(Build.SourcesDirectory)/$(k8sManifestPath)" ]; then
                    echo "Directory $(Build.SourcesDirectory)/$(k8sManifestPath) found. Contents:"
                    ls -la "$(Build.SourcesDirectory)/$(k8sManifestPath)"
                  else
                    echo "ERROR: Directory $(Build.SourcesDirectory)/$(k8sManifestPath) NOT FOUND."
                  fi

            # Replace Tokens in Manifests - REQUIRED for #{...} placeholders
            # Ensure the 'Replace Tokens' task from the marketplace is installed
            - task: replacetokens@5 # Use version 5 or latest
              displayName: 'Replace Tokens in K8s Manifests'
              inputs:
                rootDirectory: '$(Build.SourcesDirectory)/$(k8sManifestPath)'
                targetFiles: '**/*.yaml'
                encoding: 'auto'
                writeBOM: false # Typically false for YAML
                actionOnMissing: 'warn'
                keepToken: false
                tokenPrefix: '#{'
                tokenSuffix: '}#'
                useLegacyPattern: false
                # Define variables to be replaced in the manifests
                # These values come from pipeline variables and the linked variable group
                variables: |
                  k8sNamespace = $(k8sNamespace)
                  acrName = $(acrName)
                  imageAuthApi = $(imageAuthApi)
                  imageUsersApi = $(imageUsersApi)
                  imageTodosApi = $(imageTodosApi)
                  imageLogProcessor = $(imageLogProcessor)
                  imageFrontend = $(imageFrontend)
                  Build.BuildId = $(Build.BuildId)
                  k8sImagePullSecretName = $(k8sImagePullSecretName)

            # NOTE: The following tasks now operate on the files with tokens replaced.

            - task: KubernetesManifest@0
              displayName: Create Namespace $(k8sNamespace)
              inputs:
                action: 'createSecret' # Using apply with raw manifest for namespace
                kubernetesServiceConnection: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012'
                namespace: 'default' # Action runs in default, but creates the target namespace
                manifests: |
                  apiVersion: v1
                  kind: Namespace
                  metadata:
                    # Ensure the namespace is NOT parameterized here if using replacetokens task
                    # as it will be handled by the task's namespace input below.
                    # OR ensure replacetokens runs BEFORE this step. (Current order is correct)
                    name: $(k8sNamespace) # Use pipeline variable directly
                # Use force=true if namespace might exist but needs reconciliation (use cautiously)
                # force: true

            - task: KubernetesManifest@0
              displayName: Create/Update Image Pull Secret ($(k8sImagePullSecretName))
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012'
                namespace: $(k8sNamespace) # Target the correct namespace
                secretType: 'dockerRegistry'
                secretName: $(k8sImagePullSecretName) # Defined in variables
                dockerRegistryEndpoint: 'ACR-Service-Connection' # Service Connection linked to your ACR
                force: true # Allow updates

            - task: KubernetesManifest@0
              displayName: Create/Update Redis Secret ($(k8sRedisSecretName))
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012'
                namespace: $(k8sNamespace) # Target the correct namespace
                secretType: 'generic'
                secretName: $(k8sRedisSecretName) # Defined in variables
                # Ensure redisPrimaryKey is marked as secret in the variable group
                secretArguments: '--from-literal=redisHost=$(redisHostName) --from-literal=redisKey=$(redisPrimaryKey)'
                force: true # Allow updates

            - task: KubernetesManifest@0
              displayName: Create/Update App Secrets (JWT) ($(k8sAppSecretName))
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012'
                namespace: $(k8sNamespace) # Target the correct namespace
                secretType: 'generic'
                secretName: $(k8sAppSecretName) # Defined in variables
                # Ensure jwtSecretValue is defined in the variable group and marked as secret
                secretArguments: '--from-literal=jwtSecret=$(jwtSecretValue)'
                force: true # Allow updates

            - task: KubernetesManifest@0
              displayName: Apply App ConfigMap
              inputs:
                action: 'apply' # Use apply for ConfigMaps
                kubernetesServiceConnection: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012'
                namespace: $(k8sNamespace) # Target the correct namespace
                # Apply the configmap file AFTER token replacement
                manifests: '$(Build.SourcesDirectory)/$(k8sManifestPath)/app-configmap.yaml'
                # force: true # Use if updates often needed

            - task: KubernetesManifest@0
              displayName: Deploy Application Manifests
              inputs:
                action: 'deploy' # Creates or updates resources based on manifests
                kubernetesServiceConnection: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012'
                namespace: $(k8sNamespace) # Deploy into the correct namespace
                # Apply Deployments and Services (token replaced files)
                manifests: |
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/auth-api-deployment.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/auth-api-service.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/users-api-deployment.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/users-api-service.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/todos-api-deployment.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/todos-api-service.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/log-processor-deployment.yaml
                  # log-processor has no service
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/frontend-deployment.yaml
                  $(Build.SourcesDirectory)/$(k8sManifestPath)/frontend-service.yaml
                # NOTE: Image substitution is now handled by the replacetokens task.
                # The 'containers' input is NOT needed here if replacetokens ran successfully.
                # containers: |
                #   ... (This section can be removed if replacetokens works) ...
                # imagePullSecrets is still needed if specified in deployment YAMLs, but replacetokens should have inserted the correct name already.
                # imagePullSecrets: '$(k8sImagePullSecretName)'

            - task: Bash@3
              displayName: Verify Deployments (Wait & Check)
              inputs:
                targetType: 'inline'
                script: |
                  echo "Waiting for deployments in namespace $(k8sNamespace) to stabilize..."
                  # Assume kubectl is available on the agent, configure context if needed
                  # If context isn't automatically set by Service Connection:
                  echo "Attempting to set kubectl context..."
                  az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId) --output none
                  az account set --subscription $(subscriptionId)
                  az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
                  if [ $? -ne 0 ]; then echo "Failed to get AKS credentials."; exit 1; fi
                  echo "kubectl context set."

                  # Wait for deployments to become available
                  kubectl wait --namespace $(k8sNamespace) \
                    --for=condition=available deployment \
                    --all \
                    --timeout=5m

                  if [ $? -ne 0 ]; then echo "Deployments did not become available in time."; exit 1; fi

                  echo "All deployments in $(k8sNamespace) are available."
                  echo "--- Pods ---"
                  kubectl get pods -n $(k8sNamespace)
                  echo "--- Services ---"
                  kubectl get svc -n $(k8sNamespace)
                  # Potentially check for LoadBalancer IP
                  echo "Checking Frontend LoadBalancer IP..."
                  FRONTEND_IP=$(kubectl get svc frontend-service -n $(k8sNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                  if [ -z "$FRONTEND_IP" ]; then
                    echo "Frontend LoadBalancer IP not assigned yet. Waiting a bit longer..."
                    sleep 60 # Wait for Azure LB provisioning
                    FRONTEND_IP=$(kubectl get svc frontend-service -n $(k8sNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                  fi
                  if [ -n "$FRONTEND_IP" ]; then
                    echo "Frontend accessible at: http://$FRONTEND_IP"
                  else
                    echo "WARNING: Frontend LoadBalancer IP could not be retrieved."
                  fi