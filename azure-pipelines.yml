trigger:
  branches:
    include:
      - dev
      - master
  paths:
    include:
      - 'auth-api/'
      - 'users-api/'
      - 'todos-api/'
      - 'log-message-processor/'
      - 'frontend/'
      - 'k8s/'
      - 'azure-pipelines-app.yml'
    exclude:
      - '**/*.md'

pool:
  vmImage: ubuntu-latest

variables:
  # Determine environment based on branch
  - name: environment
    ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
      value: 'prod'
    ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
      value: 'dev'
  - group: app-variables-${{ variables.environment }} # Ensure 'acrName' is defined here

  # Define image names consistently
  - name: imageAuthApi
    value: 'auth-api'
  - name: imageUsersApi
    value: 'users-api'
  - name: imageTodosApi
    value: 'todos-api'
  - name: imageLogProcessor
    value: 'log-message-processor'
  - name: imageFrontend
    value: 'frontend'

  # Kubernetes details
  - name: k8sNamespace
    value: 'apps-$(environment)'
  - name: k8sRedisSecretName
    value: 'redis-secret'
  - name: k8sAppSecretName
    value: 'app-secrets'
  - name: k8sManifestPath
    value: 'k8s'

  # Service Connection Names
  - name: acrServiceConnection
    value: 'ACR-Service-Connection' # Replace if needed
  - name: aksServiceConnection
    value: 'aks-prod-microAppProd-prod-pheasant-aks-apps-prod-1745099156012' # Replace if needed

stages:
  # =========================================================================
  # Stage 1: Build and Push ONLY CHANGED Docker Images
  # =========================================================================
  - stage: BuildAndPush
    displayName: Build & Push Changed Images
    jobs:
      - job: BuildPushMatrix
        displayName: Build and Push Services
        strategy:
          matrix:
            AuthApi:
              imageName: $(imageAuthApi)
              buildContext: 'auth-api'
            UsersApi:
              imageName: $(imageUsersApi)
              buildContext: 'users-api'
            TodosApi:
              imageName: $(imageTodosApi)
              buildContext: 'todos-api'
            LogProcessor:
              imageName: $(imageLogProcessor)
              buildContext: 'log-message-processor'
            Frontend:
              imageName: $(imageFrontend)
              buildContext: 'frontend'
        steps:
          - checkout: self
            fetchDepth: 0 # Need history for git diff
            displayName: Checkout Full History

          - task: Bash@3
            name: DetectChanges # Step name for output reference
            displayName: 'Detect Changes in $(buildContext)'
            inputs:
              targetType: 'inline'
              script: |
                set -e
                SHOULD_BUILD="false"
                # Compare against the previous commit on the same branch
                # Use origin/$BUILD_SOURCEBRANCHNAME to compare against the remote state before merge commit (if applicable)
                # Or use HEAD~1 for simpler direct parent comparison
                echo "Checking for changes in $(buildContext)/ between HEAD~1 and HEAD"
                # Use git diff with exit code check
                if ! git diff --quiet HEAD~1 HEAD -- "$(Build.SourcesDirectory)/$(buildContext)/"; then
                  echo "Changes detected in $(buildContext). Setting SHOULD_BUILD=true."
                  SHOULD_BUILD="true"
                else
                  echo "No changes detected in $(buildContext)."
                fi
                # Set output variable for this job instance
                echo "##vso[task.setvariable variable=ShouldBuild;isOutput=true]$SHOULD_BUILD"

          - task: Docker@2
            displayName: 'Build and Push $(imageName) (if changed)'
            # Use the output variable from the DetectChanges task IN THE SAME JOB
            condition: eq(variables['DetectChanges.ShouldBuild'], 'true')
            inputs:
              containerRegistry: '$(acrServiceConnection)'
              repository: '$(imageName)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.SourcesDirectory)/$(buildContext)/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)/$(buildContext)'
              tags: '$(Build.BuildId)'
              addPipelineData: false

  # =========================================================================
  # Stage 2: Deploy to AKS
  # =========================================================================
  - stage: DeployToAKS
    displayName: Deploy Applications to AKS
    dependsOn: BuildAndPush
    # Ensure stage runs only if BuildAndPush succeeded/skipped and branch is correct
    condition: and(in(dependencies.BuildAndPush.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'dev')))
    jobs:
      - deployment: DeployApps
        displayName: Deploy to AKS ($(environment))
        environment: 'aks-$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                # STEP 0: Checkout
                - checkout: self
                  # No need for fetchDepth here unless you need history in deploy stage
                  displayName: Checkout Repository

                # STEP 1: Debug K8s Directory Check (keep for verification)
                - task: Bash@3
                  displayName: 'Debug: Check for K8s Manifests Directory'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "Pipeline Workspace: $(Pipeline.Workspace)"
                      echo "Build Sources Directory: $(Build.SourcesDirectory)"
                      echo "Listing contents of $(Build.SourcesDirectory):"
                      ls -la $(Build.SourcesDirectory)
                      echo "Checking for $(Build.SourcesDirectory)/$(k8sManifestPath):"
                      if [ -d "$(Build.SourcesDirectory)/$(k8sManifestPath)" ]; then
                        echo "Directory $(Build.SourcesDirectory)/$(k8sManifestPath) found. Contents:"
                        ls -la "$(Build.SourcesDirectory)/$(k8sManifestPath)"
                      else
                        echo "ERROR: Directory $(Build.SourcesDirectory)/$(k8sManifestPath) NOT FOUND."
                        exit 1
                      fi

                # STEP 2: Replace Tokens
                - task: replacetokens@5
                  displayName: 'Replace Tokens in K8s Manifests'
                  inputs:
                    rootDirectory: '$(Build.SourcesDirectory)/$(k8sManifestPath)'
                    targetFiles: '**/*.yaml'
                    encoding: 'auto'
                    writeBOM: false
                    actionOnMissing: 'warn'
                    keepToken: false
                    tokenPrefix: '#{'
                    tokenSuffix: '}#'
                    useLegacyPattern: false
                    variables: |
                      k8sNamespace = $(k8sNamespace)
                      acrName = $(acrName) # Ensure this is defined in your variable group
                      Build.BuildId = $(Build.BuildId) # Image tag

                # STEP 3: Ensure Namespace exists
                - task: KubernetesManifest@1 # Updated task version
                  displayName: Ensure Namespace $(k8sNamespace) exists
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    manifests: '$(Build.SourcesDirectory)/$(k8sManifestPath)/namespace.yaml'

                # STEP 4: Create/Update Secrets
                - task: KubernetesManifest@1 # Updated task version
                  displayName: Create/Update Redis Secret ($(k8sRedisSecretName))
                  inputs:
                    action: 'createSecret'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    secretType: 'generic'
                    secretName: $(k8sRedisSecretName)
                    secretArguments: '--from-literal=redisHost=$(redisHostName) --from-literal=redisKey=$(redisPrimaryKey)' # Ensure these vars are in the group

                - task: KubernetesManifest@1 # Updated task version
                  displayName: Create/Update App Secrets (JWT) ($(k8sAppSecretName))
                  inputs:
                    action: 'createSecret'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    secretType: 'generic'
                    secretName: $(k8sAppSecretName)
                    secretArguments: '--from-literal=jwtSecret=$(jwtSecretValue)' # Ensure this var is in the group

                # STEP 5: Apply App ConfigMap
                - task: KubernetesManifest@1 # Updated task version
                  displayName: Apply App ConfigMap
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    manifests: '$(Build.SourcesDirectory)/$(k8sManifestPath)/app-configmap.yaml'

                # --- STEP 6: Conditional Service Deployments (using revised stageDependencies syntax) ---

                - task: KubernetesManifest@1
                  displayName: Apply Auth API Manifests (if changed)
                  # Use stageDependencies with JobName_MatrixInstance syntax
                  condition: eq(stageDependencies.BuildAndPush.BuildPushMatrix_AuthApi.outputs['DetectChanges.ShouldBuild'], 'true')
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    manifests: |
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/auth-api-deployment.yaml
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/auth-api-service.yaml

                - task: KubernetesManifest@1
                  displayName: Apply Users API Manifests (if changed)
                  # Use stageDependencies with JobName_MatrixInstance syntax
                  condition: eq(stageDependencies.BuildAndPush.BuildPushMatrix_UsersApi.outputs['DetectChanges.ShouldBuild'], 'true')
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    manifests: |
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/users-api-deployment.yaml
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/users-api-service.yaml

                - task: KubernetesManifest@1
                  displayName: Apply Todos API Manifests (if changed)
                  # Use stageDependencies with JobName_MatrixInstance syntax
                  condition: eq(stageDependencies.BuildAndPush.BuildPushMatrix_TodosApi.outputs['DetectChanges.ShouldBuild'], 'true')
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    manifests: |
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/todos-api-deployment.yaml
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/todos-api-service.yaml

                - task: KubernetesManifest@1
                  displayName: Apply Log Processor Manifests (if changed)
                  # Use stageDependencies with JobName_MatrixInstance syntax
                  condition: eq(stageDependencies.BuildAndPush.BuildPushMatrix_LogProcessor.outputs['DetectChanges.ShouldBuild'], 'true')
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    manifests: |
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/log-processor-deployment.yaml # Assuming no service needed or it's separate

                - task: KubernetesManifest@1
                  displayName: Apply Frontend Manifests (if changed)
                  # Use stageDependencies with JobName_MatrixInstance syntax
                  condition: eq(stageDependencies.BuildAndPush.BuildPushMatrix_Frontend.outputs['DetectChanges.ShouldBuild'], 'true')
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: '$(aksServiceConnection)'
                    namespace: $(k8sNamespace)
                    manifests: |
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/frontend-deployment.yaml
                      $(Build.SourcesDirectory)/$(k8sManifestPath)/frontend-service.yaml

