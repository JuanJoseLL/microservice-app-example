# azure-pipelines.yml

trigger:
- main # Trigger pipeline on commits to the main branch

variables:
  # --- Agent Pool ---
  vmImageName: 'ubuntu-latest'

  # --- Azure Resources ---
  azureSubscriptionConnection: 'YourAzureResourceManagerConnectionName' # Replace with your ARM Service Connection name
  resourceGroup: 'YourResourceGroupName'        # Replace with your Resource Group name
  azureLocation: 'eastus'                       # Replace with your Azure region

  # --- ACR Details ---
  acrServiceConnection: 'YourACRServiceConnectionName' # Replace with your ACR Service Connection name
  acrName: 'youracrname'                      # Replace with your ACR name (e.g., myappacr)
  # Derived ACR login server (used in multiple places)
  acrLoginServer: '$(acrName).azurecr.io'
  imageRepoPrefix: 'microservice-training'    # Prefix for image names in ACR

  # --- ACI Deployment ---
  aciDeploymentFile: 'aci-deployment.yml' # Path to your ACI yaml template
  aciDnsNameLabel: 'my-todo-app-aci'      # Base DNS label for ACI (will be unique with build ID)

  # --- AKS Deployment ---
  aksClusterName: 'YourAKSClusterName'          # Replace with your AKS Cluster name
  kubernetesServiceConnection: 'YourKubernetesServiceConnectionName' # Replace with your K8s Service Connection name
  kubernetesManifestPath: 'kubernetes'      # Path to the folder containing K8s YAML templates
  kubernetesNamespace: 'default'            # Target namespace in AKS

  # --- Build Tag ---
  # Use Build.BuildId for unique image tags per build
  imageTag: '$(Build.BuildId)'

  # --- Secrets (Define these as SECRET variables in the Pipeline UI for security!) ---
  # It's recommended to store sensitive values like JWT secrets or DB passwords here or in Azure Key Vault
  # Placeholder for demonstration - DEFINE AS SECRET IN UI
  JWT_SECRET: 'DefineThisSecretInPipelineUI'
  # ACR Credentials - these will be populated by the ACR service connection for ACI deployment task
  # We don't need to define them explicitly here if using the service connection's identity

# Use stages for better organization
stages:
- stage: BuildAndPush
  displayName: 'Build and Push Images'
  jobs:
  - job: Build
    displayName: 'Build and Push Service Images'
    pool:
      vmImage: $(vmImageName)
    steps:
    # Use one task per service image for clarity
    - task: Docker@2
      displayName: 'Build and Push Users API'
      inputs:
        command: buildAndPush
        containerRegistry: $(acrServiceConnection)
        repository: '$(imageRepoPrefix)/users-api'
        dockerfile: 'UsersAPI/Dockerfile' # Adjust path if needed
        buildContext: 'UsersAPI'          # Adjust path if needed
        tags: $(imageTag)

    - task: Docker@2
      displayName: 'Build and Push Auth API'
      inputs:
        command: buildAndPush
        containerRegistry: $(acrServiceConnection)
        repository: '$(imageRepoPrefix)/auth-api'
        dockerfile: 'AuthAPI/Dockerfile'   # Adjust path if needed
        buildContext: 'AuthAPI'            # Adjust path if needed
        tags: $(imageTag)

    - task: Docker@2
      displayName: 'Build and Push TODOs API'
      inputs:
        command: buildAndPush
        containerRegistry: $(acrServiceConnection)
        repository: '$(imageRepoPrefix)/todos-api'
        dockerfile: 'TodosAPI/Dockerfile' # Adjust path if needed
        buildContext: 'TodosAPI'          # Adjust path if needed
        tags: $(imageTag)

    - task: Docker@2
      displayName: 'Build and Push Log Processor'
      inputs:
        command: buildAndPush
        containerRegistry: $(acrServiceConnection)
        repository: '$(imageRepoPrefix)/log-processor'
        dockerfile: 'LogProcessor/Dockerfile' # Adjust path if needed
        buildContext: 'LogProcessor'          # Adjust path if needed
        tags: $(imageTag)

    - task: Docker@2
      displayName: 'Build and Push Frontend'
      inputs:
        command: buildAndPush
        containerRegistry: $(acrServiceConnection)
        repository: '$(imageRepoPrefix)/frontend'
        dockerfile: 'Frontend/Dockerfile' # Adjust path if needed
        buildContext: 'Frontend'          # Adjust path if needed
        tags: $(imageTag)

    # Publish the Kubernetes manifests folder as an artifact
    # This makes it available to the deployment stage without needing checkout again
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(kubernetesManifestPath)'
        artifact: 'kubernetes-manifests'
        publishLocation: 'pipeline'

    # Also publish the ACI deployment file
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(aciDeploymentFile)'
        artifact: 'aci-manifest'
        publishLocation: 'pipeline'


- stage: DeployACI
  displayName: 'Deploy to ACI'
  dependsOn: BuildAndPush
  condition: succeeded() # Only run if BuildAndPush succeeded
  jobs:
  - deployment: DeployACIJob # Use a deployment job for environment tracking
    displayName: 'Deploy Services to ACI'
    environment: 'ACI-Learning-Env' # Define an environment in Azure DevOps Pipelines
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # Download the ACI manifest artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'aci-manifest'
              targetPath: '$(Pipeline.Workspace)/aci'

          # Replace tokens in the ACI YAML file
          # NOTE: You might need to install this extension: https://marketplace.visualstudio.com/items?itemName=qetza.replacetokens
          - task: replacetokens@5
            displayName: 'Replace Tokens in ACI YAML'
            inputs:
              targetFiles: '$(Pipeline.Workspace)/aci/$(aciDeploymentFile)'
              encoding: 'auto'
              tokenPattern: 'containerregistrycreds'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTransforms: false
              enableRecursion: false
              useLegacyEmptyFeature: true
              emptyValue: ''
              # Define variables to be replaced. Use secret variables for credentials.
              # ACR credentials can often be derived from the service connection if the task supports it,
              # but AzureCLI task might need them explicitly. Let's try passing them.
              # Get ACR credentials from the Service Connection
              # Note: Ensure your ACR service connection user has AcrPull role on the ACR
              variables: |
                ACR_LOGIN_SERVER: $(acrLoginServer)
                ACR_USERNAME: $(acrServiceConnection.username) # Access service connection username
                ACR_PASSWORD: $(acrServiceConnection.password) # Access service connection password (SECRET)
                JWT_SECRET: $(JWT_SECRET)                       # Pipeline Secret Variable
                ACI_DNS_NAME_LABEL: $(aciDnsNameLabel)
                Build.BuildId: $(Build.BuildId)
                AzureLocation: $(azureLocation)

          # Deploy using Azure CLI
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Instances'
            inputs:
              azureSubscription: $(azureSubscriptionConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deploying ACI Container Group..."
                az container create \
                  --resource-group $(resourceGroup) \
                  --file $(Pipeline.Workspace)/aci/$(aciDeploymentFile)
                echo "ACI Deployment Initiated."


- stage: DeployAKS
  displayName: 'Deploy to AKS'
  dependsOn: BuildAndPush
  condition: succeeded()
  jobs:
  - deployment: DeployAKSJob
    displayName: 'Deploy Services to AKS'
    environment: 'AKS-Learning-Env' # Define an environment in Azure DevOps Pipelines
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # Download the Kubernetes manifests artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'kubernetes-manifests'
              targetPath: '$(Pipeline.Workspace)/k8s'

          # Replace tokens in Kubernetes Manifests
          - task: replacetokens@5
            displayName: 'Replace Tokens in K8s Manifests'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/k8s'
              targetFiles: '**/*.yml' # Process all yaml files in the folder
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTransforms: false
              enableRecursion: false
              useLegacyEmptyFeature: true
              emptyValue: ''
              variables: |
                ACR_LOGIN_SERVER: $(acrLoginServer)
                Build.BuildId: $(imageTag)
                JWT_SECRET: $(JWT_SECRET) # Inject secret if needed in K8s manifests

          # Deploy to Kubernetes
          - task: KubernetesManifest@0
            displayName: 'Deploy to Kubernetes Cluster'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(kubernetesNamespace)
              manifests: |
                $(Pipeline.Workspace)/k8s/01-redis-deployment.yml
                $(Pipeline.Workspace)/k8s/02-redis-service.yml
                $(Pipeline.Workspace)/k8s/03-users-api-deployment.yml
                $(Pipeline.Workspace)/k8s/04-users-api-service.yml
                $(Pipeline.Workspace)/k8s/05-auth-api-deployment.yml
                $(Pipeline.Workspace)/k8s/06-auth-api-service.yml
                $(Pipeline.Workspace)/k8s/07-todos-api-deployment.yml
                $(Pipeline.Workspace)/k8s/08-todos-api-service.yml
                $(Pipeline.Workspace)/k8s/09-log-processor-deployment.yml
                # Log processor doesn't usually need a service unless something calls it
                $(Pipeline.Workspace)/k8s/10-frontend-deployment.yml
                $(Pipeline.Workspace)/k8s/11-frontend-service.yml
              # Image tags are now directly in the manifests due to token replacement
              # containers: | # Not needed if tags are replaced in manifests directly
              #   $(acrLoginServer)/$(imageRepoPrefix)/users-api:$(imageTag)
              #   $(acrLoginServer)/$(imageRepoPrefix)/auth-api:$(imageTag)
              #   $(acrLoginServer)/$(imageRepoPrefix)/todos-api:$(imageTag)
              #   $(acrLoginServer)/$(imageRepoPrefix)/log-processor:$(imageTag)
              #   $(acrLoginServer)/$(imageRepoPrefix)/frontend:$(imageTag)
